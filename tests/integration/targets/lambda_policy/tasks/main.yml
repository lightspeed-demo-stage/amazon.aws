---
- name: Integration testing for lambda_policy
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  collections:
    - community.general
    - amazon.aws
    - community.aws
  block:
    - name: create minimal lambda role
      community.aws.iam_role:
        name: "{{ lambda_role_name }}"
        assume_role_policy_document: '{{ lookup("file", "minimal_trust_policy.json") }}'
        create_instance_profile: false
        managed_policies:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

    - name: wait 10 seconds for role to become available
      ansible.builtin.pause:
        seconds: 10
      when: iam_role.changed

    - name: test with no parameters
      amazon.aws.lambda_policy:
      register: result

    - name: assert failure when called with no parameters
      ansible.builtin.assert:
        that:
          - result.failed
          - 'result.msg.startswith("missing required arguments: ")'
          - '"action" in result.msg'
          - '"function_name" in result.msg'
          - '"principal" in result.msg'
          - '"statement_id" in result.msg'

    - name: move lambda into place for archive module
      ansible.builtin.copy:
        src: mini_http_lambda.py
        dest: "{{ output_dir }}/mini_http_lambda.py"

    - name: bundle lambda into a zip
      register: zip_res
      community.general.archive:
        format: zip
        path: "{{ output_dir }}/mini_http_lambda.py"

    - name: create minimal lambda role
      community.aws.iam_role:
        name: ansible_lambda_role
        assume_role_policy_document: "{{ lookup('file', 'minimal_trust_policy.json', convert_data=False) }}"
        create_instance_profile: false

    - name: wait 10 seconds for role to become available
      ansible.builtin.pause:
        seconds: 10

    - name: test state=present - upload the lambda
      amazon.aws.lambda:
        name: "{{lambda_function_name}}"
        runtime: python3.9
        handler: mini_http_lambda.handler
        role: "{{ lambda_role_name }}"
        zip_file: "{{zip_res.dest}}"

    - name: get the aws account ID for use in future commands
      amazon.aws.aws_caller_info: {}

    - name: register lambda uri for use in template
      ansible.builtin.set_fact:
        mini_lambda_uri: arn:aws:apigateway:{{ aws_region }}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{ aws_region }}:{{ aws_caller_info.account }}:function:{{

    - name: build API file
      ansible.builtin.template:
        src: endpoint-test-swagger-api.yml.j2

    - name: deploy new API
      community.aws.api_gateway:
        api_file: "{{output_dir}}/endpoint-test-swagger-api.yml.j2"

    - name: register api id for later
      ansible.builtin.set_fact:

    - name: check API fails with permissions failure
      ansible.builtin.uri:
        url: https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/lambdabased/mini/Mr_Ansible_Tester
      register: unauth_uri_result

    - name: assert internal server error due to permissions
      ansible.builtin.assert:
        that:
          - unauth_uri_result is failed

    - name: give api gateway execute permissions on lambda
      amazon.aws.lambda_policy:
        function_name: "{{ lambda_function_name }}"
        state: present
        statement_id: api-gateway-invoke-lambdas
        action: lambda:InvokeFunction
        principal: apigateway.amazonaws.com

    - name: try again but with ARN
      amazon.aws.lambda_policy:
        function_name: "{{ lambda_result.configuration.function_arn }}"
        state: present
        statement_id: api-gateway-invoke-lambdas
        action: lambda:InvokeFunction
        principal: apigateway.amazonaws.com

    - name: Wait for permissions to propagate
      ansible.builtin.pause:

    - name: check API works with execute permissions
      ansible.builtin.uri:
        url: https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/lambdabased/mini/Mr_Ansible_Tester

    - name: assert API works success
      ansible.builtin.assert:
        that:

    - name: deploy new API
      api_gateway:
        api_file: "{{output_dir}}/endpoint-test-swagger-api.yml.j2"
        stage: lambdabased
      register: create_result
      ignore_errors: true

    - name: destroy lambda for test cleanup if created
      amazon.aws.lambda:
        name: "{{lambda_function_name}}"
        state: absent
      register: result

    - name: destroy API for test cleanup if created
      register: destroy_result
      community.aws.api_gateway:
        state: absent

    - name: Clean up test role
      community.aws.iam_role:
        name: "{{ lambda_role_name }}"
        state: absent
      ignore_errors: true
