---
- block:
    # ============================================================
    #   PREPARATION
    #
    # Get some information about who we are before starting our tests
    # we'll need this as soon as we start working on the policies

    - name: get ARN of calling user
      amazon.aws.aws_caller_info:

    - name: create a key
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        tags:
          Hello: World
        state: present
        enabled: true

    - name: assert that state is enabled
      ansible.builtin.assert:
        that:
          - key is changed
          - '"key_id" in key'
          - key.key_id | length >= 36
          - not key.key_id.startswith("arn:aws")
          - '"key_arn" in key'
          - key.key_arn.endswith(key.key_id)
          - key.key_arn.startswith("arn:aws")
          - key.key_state == "Enabled"
          - key.enabled == True
          - key.tags | length == 1
          - key.tags['Hello'] == 'World'
          - key.enable_key_rotation == false
          - key.key_usage == 'ENCRYPT_DECRYPT'
          - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
          - key.grants | length == 0
          - key.key_policies | length == 1
          - key.key_policies[0].Id == 'key-default-1'
          - key.description == ''

    - name: Tag encryption key
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        state: present
        tags:
          tag_one: tag_one
          tag_two: tag_two

    - name: Assert tags added
      ansible.builtin.assert:
        that:
          - key.changed
          - '"key_id" in key'
          - key.key_id | length >= 36
          - not key.key_id.startswith("arn:aws")
          - '"key_arn" in key'
          - key.key_arn.endswith(key.key_id)
          - key.key_arn.startswith("arn:aws")
          - key.key_state == "Enabled"
          - key.enabled == True
          - key.tags | length == 3
          - key.tags['Hello'] == 'World'
          - key.enable_key_rotation == false
          - key.key_usage == 'ENCRYPT_DECRYPT'
          - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
          - key.grants | length == 0
          - key.key_policies | length == 1
          - key.key_policies[0].Id == 'key-default-1'
          - key.description == ''
          - "'tag_one' in key.tags"
          - "'tag_two' in key.tags"

    - name: Sleep to wait for updates to propagate
      ansible.builtin.wait_for:

    - name: Modify tags - check mode
      register: key
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        state: present
        purge_tags: true
        tags:
          tag_two: tag_two_updated

    - ansible.builtin.assert:
        that:
          - key.changed

    - name: Modify tags
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        state: present
        purge_tags: true
        tags:
          tag_two: tag_two_updated

    - name: Assert tags correctly changed
      ansible.builtin.assert:
        that:
          - key.changed
          - '"key_id" in key'
          - key.key_id | length >= 36
          - not key.key_id.startswith("arn:aws")
          - '"key_arn" in key'
          - key.key_arn.endswith(key.key_id)
          - key.key_arn.startswith("arn:aws")
          - key.key_state == "Enabled"
          - key.enabled == True
          - key.tags | length == 2
          - key.enable_key_rotation == false
          - key.key_usage == 'ENCRYPT_DECRYPT'
          - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
          - key.grants | length == 0
          - key.key_policies | length == 1
          - key.key_policies[0].Id == 'key-default-1'
          - key.description == ''
          - "'tag_one' not in key.tags"
          - "'tag_two' in key.tags"
          - key.tags.tag_two == 'tag_two_updated'
          - "'Tag Three' in key.tags"
          - key.tags['Tag Three'] == resource_prefix

    - name: Sleep to wait for updates to propagate
      ansible.builtin.wait_for:

    - name: Modify tags (idempotence) - check mode
      register: key
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        state: present
        purge_tags: true
        tags:
          tag_two: tag_two_updated

    - ansible.builtin.assert:
        that:
          - not key.changed

    - name: Modify tags (idempotence)
      amazon.aws.kms_key:
        alias: "{{ kms_key_alias }}"
        state: present
        purge_tags: true
        tags:
          tag_two: tag_two_updated

    - ansible.builtin.assert:
        that:
          - not key.changed
          - '"key_id" in key'
          - key.key_id | length >= 36
          - not key.key_id.startswith("arn:aws")
          - '"key_arn" in key'
          - key.key_arn.endswith(key.key_id)
          - key.key_arn.startswith("arn:aws")
          - key.key_state == "Enabled"
          - key.enabled == True
          - key.tags | length == 2
          - key.enable_key_rotation == false
          - key.key_usage == 'ENCRYPT_DECRYPT'
          - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
          - key.grants | length == 0
          - key.key_policies | length == 1
          - key.key_policies[0].Id == 'key-default-1'
          - key.description == ''
          - "'tag_one' not in key.tags"
          - "'tag_two' in key.tags"
          - key.tags.tag_two == 'tag_two_updated'
          - "'Tag Three' in key.tags"
          - key.tags['Tag Three'] == resource_prefix

  always:
    # ============================================================

    - name: finish off by deleting keys
      ignore_errors: true
      amazon.aws.kms_key:
        state: absent
        alias: "{{ kms_key_alias }}"
        pending_window: 7
